{
    "localComponents": [
        "SECONDARY_NAMENODE", 
        "NAMENODE", 
        "APP_TIMELINE_SERVER", 
        "RESOURCEMANAGER", 
        "HISTORYSERVER", 
        "ZOOKEEPER_SERVER", 
        "METRICS_COLLECTOR", 
        "METRICS_GRAFANA", 
        "DATANODE", 
        "NODEMANAGER", 
        "HDFS_CLIENT", 
        "YARN_CLIENT", 
        "MAPREDUCE2_CLIENT", 
        "ZOOKEEPER_CLIENT", 
        "METRICS_MONITOR"
    ], 
    "configuration_attributes": {
        "mapred-site": {}, 
        "ssl-client": {}, 
        "ams-hbase-site": {
            "final": {
                "hbase.zookeeper.quorum": "true"
            }
        }, 
        "ams-grafana-env": {}, 
        "ams-ssl-client": {}, 
        "ranger-hdfs-plugin-properties": {}, 
        "ams-hbase-env": {}, 
        "ams-logsearch-conf": {}, 
        "ams-hbase-security-site": {}, 
        "hdfs-site": {
            "final": {
                "dfs.datanode.data.dir": "true", 
                "dfs.namenode.http-address": "true", 
                "dfs.datanode.failed.volumes.tolerated": "true", 
                "dfs.support.append": "true", 
                "dfs.namenode.name.dir": "true", 
                "dfs.webhdfs.enabled": "true"
            }
        }, 
        "yarn-log4j": {}, 
        "ams-env": {}, 
        "ams-site": {}, 
        "ams-hbase-policy": {}, 
        "hadoop-policy": {}, 
        "hdfs-log4j": {}, 
        "ams-grafana-ini": {}, 
        "mapred-env": {}, 
        "ams-ssl-server": {}, 
        "core-site": {
            "final": {
                "fs.defaultFS": "true"
            }
        }, 
        "yarn-env": {}, 
        "ams-hbase-log4j": {}, 
        "hadoop-env": {}, 
        "zookeeper-log4j": {}, 
        "yarn-site": {}, 
        "capacity-scheduler": {}, 
        "ssl-server": {}, 
        "zoo.cfg": {}, 
        "ams-log4j": {}, 
        "zookeeper-env": {}, 
        "cluster-env": {}
    }, 
    "public_hostname": "{{ c.job.hostname }}", 
    "commandId": "{{ c.job.id }}-0", 
    "hostname": "{{ c.job.hostname }}", 
    "kerberosCommandParams": [], 
    "serviceName": "{{ c.job.service }}", 
    "role": "{{ c.job.component }}", 
    "forceRefreshConfigTagsBeforeExecution": false, 
    "requestId": {{ c.job.id }}, 
    "agentConfigParams": {
        "agent": {
            "parallel_execution": 0, 
            "use_system_proxy_settings": true
        }
    }, 
    "clusterName": "{{ c.job.cluster }}", 
    "commandType": "EXECUTION_COMMAND", 
    "taskId": {{ c.job.id }}, 
    "roleParams": {}, 
    "configurationTags": {
        "mapred-site": {
            "tag": "version1"
        }, 
        "ssl-client": {
            "tag": "version1"
        }, 
        "ams-hbase-site": {
            "tag": "version1"
        }, 
        "ams-grafana-env": {
            "tag": "version1"
        }, 
        "ams-ssl-client": {
            "tag": "version1"
        }, 
        "ranger-hdfs-plugin-properties": {
            "tag": "version1"
        }, 
        "ams-hbase-env": {
            "tag": "version1"
        }, 
        "ams-logsearch-conf": {
            "tag": "version1"
        }, 
        "ams-hbase-security-site": {
            "tag": "version1"
        }, 
        "hdfs-site": {
            "tag": "version1"
        }, 
        "ams-env": {
            "tag": "version1"
        }, 
        "ams-site": {
            "tag": "version1"
        }, 
        "ams-hbase-policy": {
            "tag": "version1"
        }, 
        "hadoop-policy": {
            "tag": "version1"
        }, 
        "hdfs-log4j": {
            "tag": "version1"
        }, 
        "ams-grafana-ini": {
            "tag": "version1"
        }, 
        "mapred-env": {
            "tag": "version1"
        }, 
        "ams-ssl-server": {
            "tag": "version1"
        }, 
        "zoo.cfg": {
            "tag": "version1"
        }, 
        "core-site": {
            "tag": "version1"
        }, 
        "yarn-env": {
            "tag": "version1"
        }, 
        "ams-hbase-log4j": {
            "tag": "version1"
        }, 
        "hadoop-env": {
            "tag": "version1"
        }, 
        "zookeeper-log4j": {
            "tag": "version1"
        }, 
        "yarn-site": {
            "tag": "version1"
        }, 
        "capacity-scheduler": {
            "tag": "version1"
        }, 
        "ssl-server": {
            "tag": "version1"
        }, 
        "yarn-log4j": {
            "tag": "version1"
        }, 
        "ams-log4j": {
            "tag": "version1"
        }, 
        "zookeeper-env": {
            "tag": "version1"
        }, 
        "cluster-env": {
            "tag": "version1"
        }
    }, 
    "configuration_credentials": {}, 
    "roleCommand": "{{ c.job.command }}", 
    "credentialStoreEnabled": "false", 
    "hostLevelParams": {
        "agent_stack_retry_on_unavailability": "false", 
        "unlimited_key_jce_required": "false", 
        "group_list": "[\"hadoop\",\"users\"]", 
        "host_sys_prepped": "false", 
        "jdk_name": "jdk-8u141-linux-x64.tar.gz", 
        "ambari_db_rca_username": "mapred", 
        "mysql_jdbc_url": "http://{{ c.job.hostname }}:8080/resources//mysql-connector-java.jar", 
        "agent_stack_retry_count": "5", 
        "user_groups": "{}", 
        "stack_version": "1.4", 
        "stack_name": "ADH", 
        "ambari_db_rca_driver": "org.postgresql.Driver", 
        "java_home": "/usr/lib/jvm/jre", 
        "repository_version_id": "1", 
        "jdk_location": "http://{{ c.job.hostname }}:8080/resources/", 
        "not_managed_hdfs_path_list": "[]", 
        "ambari_db_rca_url": "jdbc:postgresql://{{ c.job.hostname }}/ambarirca", 
        "java_version": "8", 
        "repo_info": "[{\"baseUrl\":\"http://storage.googleapis.com/arenadata-repo/ADH/1.4.0/centos7/adh\",\"osType\":\"redhat7\",\"repoId\":\"ADH-1.4.0\",\"repoName\":\"ADH-1.4.0\",\"defaultBaseUrl\":\"http://storage.googleapis.com/arenadata-repo/ADH/1.4.0/centos7/adh\",\"latestBaseUrl\":\"http://storage.googleapis.com/arenadata-repo/ADH/1.4.0/centos7/adh\",\"baseSaved\":true,\"unique\":false,\"ambariManagedRepositories\":true},{\"baseUrl\":\"http://storage.googleapis.com/arenadata-repo/ADH/1.4.0/centos7/adh-utils\",\"osType\":\"redhat7\",\"repoId\":\"ADH-UTILS-1.4.0\",\"repoName\":\"ADH-UTILS-1.4.0\",\"defaultBaseUrl\":\"http://storage.googleapis.com/arenadata-repo/ADH/1.4.0/centos7/adh-utils\",\"latestBaseUrl\":\"http://storage.googleapis.com/arenadata-repo/ADH/1.4.0/centos7/adh-utils\",\"baseSaved\":true,\"unique\":false,\"ambariManagedRepositories\":true}]", 
        "package_list": "[{%for p in c.job.component_config.packages %}{\"name\":\"{{p}}\",\"condition\":\"\",\"skipUpgrade\":false}{% if loop.last == False %},{% endif %}{% endfor %}]", 
        "db_name": "ambari", 
        "agentCacheDir": "/var/lib/ambari-agent/cache", 
        "ambari_db_rca_password": "mapred", 
        "jce_name": "jce_policy-8.zip", 
        "oracle_jdbc_url": "http://{{ c.job.hostname }}:8080/resources//ojdbc6.jar", 
        "db_driver_filename": "mysql-connector-java.jar", 
        "user_list": "[\"zookeeper\",\"ams\",\"ambari-qa\",\"hdfs\",\"yarn\",\"mapred\"]", 
        "clientsToUpdateConfigs": "[\"*\"]"
    }, 
    "commandParams": {
        "service_package_folder": "{{ c.job.component_config.folder }}", 
        "script": "{{ c.job.component_config.script }}", 
        "hooks_folder": "ADH/1.0/hooks", 
        "max_duration_for_retries": "0", 
        "command_retry_enabled": "false", 
        "command_timeout": "1800", 
        "script_type": "PYTHON"
    }, 
    "stageId": 0, 
    "clusterHostInfo": {
        "snamenode_host": [
            "{{ c.job.hostname }}"
        ], 
        "nm_hosts": [
            "{{ c.job.hostname }}"
        ], 
        "app_timeline_server_hosts": [
            "{{ c.job.hostname }}"
        ], 
        "ambari_server_use_ssl": [
            "false"
        ], 
        "all_ping_ports": [
            "8670"
        ], 
        "ambari_server_host": [
            "{{ c.job.hostname }}"
        ], 
        "rm_host": [
            "{{ c.job.hostname }}"
        ], 
        "all_hosts": [
            "{{ c.job.hostname }}"
        ], 
        "slave_hosts": [
            "{{ c.job.hostname }}"
        ], 
        "namenode_host": [
            "{{ c.job.hostname }}"
        ], 
        "ambari_server_port": [
            "8080"
        ], 
        "metrics_monitor_hosts": [
            "{{ c.job.hostname }}"
        ], 
        "all_racks": [
            "/default-rack"
        ], 
        "all_ipv4_ips": [
            "127.0.0.1"
        ], 
        "zookeeper_hosts": [
            "{{ c.job.hostname }}"
        ], 
        "metrics_collector_hosts": [
            "{{ c.job.hostname }}"
        ], 
        "hs_host": [
            "{{ c.job.hostname }}"
        ], 
        "metrics_grafana_hosts": [
            "{{ c.job.hostname }}"
        ]
    }, 
    "availableServices": {
        "SQOOP": "1.4.6.1.4", 
        "AMBARI_METRICS": "0.1.0", 
        "KERBEROS": "1.10.3-10", 
        "RANGER": "0.7.0.1.4", 
        "ZEPPELIN": "0.7.0.1.4", 
        "ATLAS": "0.7.1.1.4", 
        "KNOX": "0.12.0.1.4", 
        "GANGLIA": "3.5.0", 
        "RANGER_KMS": "0.7.0.1.4", 
        "FLUME": "1.7.0.1.4", 
        "HUE": "3.11.0", 
        "FLINK": "1.1.3.1.4", 
        "YARN": "2.7.3.1.4", 
        "PIG": "0.15.0.1.4", 
        "MAHOUT": "0.12.2.1.4", 
        "TEZ": "0.7.1.1.4", 
        "MAPREDUCE2": "2.7.3.1.4", 
        "OOZIE": "4.3.0.1.4", 
        "NIFI": "1.1.2.1.4", 
        "SPARK2": "2.1.1", 
        "SOLR": "6.6.0", 
        "HDFS": "2.7.3.1.4", 
        "ZOOKEEPER": "3.4.6.1.4", 
        "HIVE": "1.2.1.1.4", 
        "KAFKA": "0.10.1", 
        "GIRAPH": "1.1.0", 
        "HBASE": "1.1.3.1.4"
    }, 
    "configurations": {
        "mapred-site": {
            "mapreduce.jobhistory.address": "{{ c.job.hostname }}:10020", 
            "mapreduce.cluster.administrators": " hadoop", 
            "mapreduce.reduce.input.buffer.percent": "0.0", 
            "mapreduce.output.fileoutputformat.compress": "false", 
            "mapreduce.framework.name": "yarn", 
            "mapreduce.map.speculative": "false", 
            "mapreduce.reduce.shuffle.merge.percent": "0.66", 
            "yarn.app.mapreduce.am.resource.mb": "4096", 
            "mapreduce.map.java.opts": "-Xmx3276m", 
            "mapreduce.application.classpath": "$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*,$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*", 
            "mapreduce.job.reduce.slowstart.completedmaps": "0.05", 
            "mapreduce.output.fileoutputformat.compress.type": "BLOCK", 
            "mapreduce.reduce.speculative": "false", 
            "mapreduce.reduce.java.opts": "-Xmx6553m", 
            "mapreduce.am.max-attempts": "2", 
            "yarn.app.mapreduce.am.admin-command-opts": "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhadoop.metrics.log.level=WARN", 
            "mapreduce.reduce.log.level": "INFO", 
            "mapreduce.map.sort.spill.percent": "0.7", 
            "mapreduce.task.timeout": "300000", 
            "mapreduce.map.memory.mb": "4096", 
            "mapreduce.task.io.sort.factor": "100", 
            "mapreduce.jobhistory.intermediate-done-dir": "/mr-history/tmp", 
            "mapreduce.reduce.memory.mb": "8192", 
            "mapreduce.job.counters.max": "130", 
            "mapreduce.map.log.level": "INFO", 
            "mapreduce.shuffle.port": "13562", 
            "yarn.app.mapreduce.am.log.level": "INFO", 
            "mapreduce.admin.user.env": "LD_LIBRARY_PATH=/usr/lib/hadoop/lib/native:/usr/lib/hadoop/lib/native/Linux-amd64-64", 
            "mapreduce.map.output.compress": "false", 
            "yarn.app.mapreduce.am.staging-dir": "/user", 
            "mapreduce.reduce.shuffle.parallelcopies": "30", 
            "yarn.app.mapreduce.am.command-opts": "-Xmx3276m", 
            "mapreduce.jobhistory.webapp.address": "{{ c.job.hostname }}:19888", 
            "mapreduce.jobhistory.done-dir": "/mr-history/done", 
            "mapreduce.admin.reduce.child.java.opts": "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhadoop.metrics.log.level=WARN", 
            "mapreduce.task.io.sort.mb": "2047", 
            "mapreduce.reduce.shuffle.input.buffer.percent": "0.7", 
            "mapreduce.admin.map.child.java.opts": "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhadoop.metrics.log.level=WARN"
        }, 
        "ssl-client": {
            "ssl.client.truststore.reload.interval": "10000", 
            "ssl.client.keystore.password": "bigdata", 
            "ssl.client.truststore.type": "jks", 
            "ssl.client.keystore.location": "/etc/security/clientKeys/keystore.jks", 
            "ssl.client.truststore.location": "/etc/security/clientKeys/all.jks", 
            "ssl.client.truststore.password": "bigdata", 
            "ssl.client.keystore.type": "jks"
        }, 
        "ranger-hdfs-plugin-properties": {}, 
        "hdfs-site": {
            "dfs.namenode.checkpoint.period": "21600", 
            "dfs.namenode.avoid.write.stale.datanode": "true", 
            "dfs.namenode.checkpoint.txns": "1000000", 
            "dfs.block.access.token.enable": "true", 
            "dfs.support.append": "true", 
            "dfs.datanode.address": "0.0.0.0:50010", 
            "dfs.cluster.administrators": " hdfs", 
            "dfs.namenode.audit.log.async": "true", 
            "dfs.datanode.balance.bandwidthPerSec": "6250000", 
            "dfs.namenode.safemode.threshold-pct": "1", 
            "dfs.namenode.checkpoint.edits.dir": "${dfs.namenode.checkpoint.dir}", 
            "dfs.namenode.rpc-address": "{{ c.job.hostname }}:8020", 
            "dfs.permissions.enabled": "true", 
            "dfs.client.read.shortcircuit": "true", 
            "dfs.https.port": "50470", 
            "dfs.namenode.https-address": "{{ c.job.hostname }}:50470", 
            "dfs.blocksize": "134217728", 
            "dfs.blockreport.initialDelay": "120", 
            "dfs.journalnode.edits.dir": "/grid/0/hdfs/journal", 
            "dfs.namenode.fslock.fair": "false", 
            "dfs.datanode.max.transfer.threads": "4096", 
            "dfs.heartbeat.interval": "3", 
            "dfs.replication": "3", 
            "dfs.namenode.handler.count": "50", 
            "dfs.namenode.checkpoint.dir": "/hadoop/hdfs/namesecondary", 
            "fs.permissions.umask-mode": "022", 
            "dfs.namenode.stale.datanode.interval": "30000", 
            "dfs.datanode.ipc.address": "0.0.0.0:8010", 
            "dfs.datanode.data.dir": "/hadoop/hdfs/data", 
            "dfs.namenode.http-address": "{{ c.job.hostname }}:50070", 
            "dfs.webhdfs.enabled": "true", 
            "dfs.datanode.failed.volumes.tolerated": "0", 
            "dfs.namenode.accesstime.precision": "0", 
            "dfs.datanode.https.address": "0.0.0.0:50475", 
            "dfs.namenode.write.stale.datanode.ratio": "1.0f", 
            "dfs.namenode.secondary.http-address": "{{ c.job.hostname }}:50090", 
            "dfs.datanode.http.address": "0.0.0.0:50075", 
            "dfs.datanode.du.reserved": "1073741824", 
            "dfs.client.read.shortcircuit.streams.cache.size": "4096", 
            "dfs.http.policy": "HTTP_ONLY", 
            "dfs.permissions.superusergroup": "hdfs", 
            "dfs.journalnode.https-address": "0.0.0.0:8481", 
            "dfs.journalnode.http-address": "0.0.0.0:8480", 
            "dfs.domain.socket.path": "/var/lib/hadoop-hdfs/dn_socket", 
            "dfs.namenode.avoid.read.stale.datanode": "true", 
            "dfs.hosts.exclude": "/etc/hadoop/conf/dfs.exclude", 
            "dfs.datanode.data.dir.perm": "750", 
            "dfs.namenode.name.dir.restore": "true", 
            "dfs.replication.max": "50", 
            "dfs.namenode.name.dir": "/hadoop/hdfs/namenode"
        }, 
        "yarn-log4j": {
            "content": "\n#Relative to Yarn Log Dir Prefix\nyarn.log.dir=.\n#\n# Job Summary Appender\n#\n# Use following logger to send summary to separate file defined by\n# hadoop.mapreduce.jobsummary.log.file rolled daily:\n# hadoop.mapreduce.jobsummary.logger=INFO,JSA\n#\nhadoop.mapreduce.jobsummary.logger=${hadoop.root.logger}\nhadoop.mapreduce.jobsummary.log.file=hadoop-mapreduce.jobsummary.log\nlog4j.appender.JSA=org.apache.log4j.DailyRollingFileAppender\n# Set the ResourceManager summary log filename\nyarn.server.resourcemanager.appsummary.log.file=hadoop-mapreduce.jobsummary.log\n# Set the ResourceManager summary log level and appender\nyarn.server.resourcemanager.appsummary.logger=${hadoop.root.logger}\n#yarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY\n\n# To enable AppSummaryLogging for the RM,\n# set yarn.server.resourcemanager.appsummary.logger to\n# LEVEL,RMSUMMARY in hadoop-env.sh\n\n# Appender for ResourceManager Application Summary Log\n# Requires the following properties to be set\n#    - hadoop.log.dir (Hadoop Log directory)\n#    - yarn.server.resourcemanager.appsummary.log.file (resource manager app summary log filename)\n#    - yarn.server.resourcemanager.appsummary.logger (resource manager app summary log level and appender)\nlog4j.appender.RMSUMMARY=org.apache.log4j.RollingFileAppender\nlog4j.appender.RMSUMMARY.File=${yarn.log.dir}/${yarn.server.resourcemanager.appsummary.log.file}\nlog4j.appender.RMSUMMARY.MaxFileSize=256MB\nlog4j.appender.RMSUMMARY.MaxBackupIndex=20\nlog4j.appender.RMSUMMARY.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RMSUMMARY.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.JSA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.JSA.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\nlog4j.appender.JSA.DatePattern=.yyyy-MM-dd\nlog4j.appender.JSA.layout=org.apache.log4j.PatternLayout\nlog4j.logger.org.apache.hadoop.yarn.server.resourcemanager.RMAppManager$ApplicationSummary=${yarn.server.resourcemanager.appsummary.logger}\nlog4j.additivity.org.apache.hadoop.yarn.server.resourcemanager.RMAppManager$ApplicationSummary=false"
        }, 
        "hadoop-policy": {
            "security.job.client.protocol.acl": "*", 
            "security.job.task.protocol.acl": "*", 
            "security.datanode.protocol.acl": "*", 
            "security.namenode.protocol.acl": "*", 
            "security.client.datanode.protocol.acl": "*", 
            "security.inter.tracker.protocol.acl": "*", 
            "security.refresh.usertogroups.mappings.protocol.acl": "hadoop", 
            "security.client.protocol.acl": "*", 
            "security.refresh.policy.protocol.acl": "hadoop", 
            "security.admin.operations.protocol.acl": "hadoop", 
            "security.inter.datanode.protocol.acl": "*"
        }, 
        "hdfs-log4j": {
            "content": "\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n\n# Define some default values that can be overridden by system properties\n# To change daemon root logger use hadoop_root_logger in hadoop-env\nhadoop.root.logger=INFO,console\nhadoop.log.dir=.\nhadoop.log.file=hadoop.log\n\n\n# Define the root logger to the system property \"hadoop.root.logger\".\nlog4j.rootLogger=${hadoop.root.logger}, EventCounter\n\n# Logging Threshold\nlog4j.threshhold=ALL\n\n#\n# Daily Rolling File Appender\n#\n\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFA.File=${hadoop.log.dir}/${hadoop.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n# Debugging Pattern format\n#log4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\n\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\n\n#\n# TaskLog Appender\n#\n\n#Default values\nhadoop.tasklog.taskid=null\nhadoop.tasklog.iscleanup=false\nhadoop.tasklog.noKeepSplits=4\nhadoop.tasklog.totalLogFileSize=100\nhadoop.tasklog.purgeLogSplits=true\nhadoop.tasklog.logsRetainHours=12\n\nlog4j.appender.TLA=org.apache.hadoop.mapred.TaskLogAppender\nlog4j.appender.TLA.taskId=${hadoop.tasklog.taskid}\nlog4j.appender.TLA.isCleanup=${hadoop.tasklog.iscleanup}\nlog4j.appender.TLA.totalLogFileSize=${hadoop.tasklog.totalLogFileSize}\n\nlog4j.appender.TLA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.TLA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n\n#\n#Security audit appender\n#\nhadoop.security.logger=INFO,console\nhadoop.security.log.maxfilesize=256MB\nhadoop.security.log.maxbackupindex=20\nlog4j.category.SecurityLogger=${hadoop.security.logger}\nhadoop.security.log.file=SecurityAuth.audit\nlog4j.appender.DRFAS=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}\nlog4j.appender.DRFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.appender.DRFAS.DatePattern=.yyyy-MM-dd\n\nlog4j.appender.RFAS=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}\nlog4j.appender.RFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.appender.RFAS.MaxFileSize=${hadoop.security.log.maxfilesize}\nlog4j.appender.RFAS.MaxBackupIndex=${hadoop.security.log.maxbackupindex}\n\n#\n# hdfs audit logging\n#\nhdfs.audit.logger=INFO,console\nlog4j.logger.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=${hdfs.audit.logger}\nlog4j.additivity.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=false\nlog4j.appender.DRFAAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFAAUDIT.File=${hadoop.log.dir}/hdfs-audit.log\nlog4j.appender.DRFAAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFAAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.DRFAAUDIT.DatePattern=.yyyy-MM-dd\n\n#\n# mapred audit logging\n#\nmapred.audit.logger=INFO,console\nlog4j.logger.org.apache.hadoop.mapred.AuditLogger=${mapred.audit.logger}\nlog4j.additivity.org.apache.hadoop.mapred.AuditLogger=false\nlog4j.appender.MRAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.MRAUDIT.File=${hadoop.log.dir}/mapred-audit.log\nlog4j.appender.MRAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.MRAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.MRAUDIT.DatePattern=.yyyy-MM-dd\n\n#\n# Rolling File Appender\n#\n\nlog4j.appender.RFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFA.File=${hadoop.log.dir}/${hadoop.log.file}\n\n# Logfile size and and 30-day backups\nlog4j.appender.RFA.MaxFileSize=256MB\nlog4j.appender.RFA.MaxBackupIndex=10\n\nlog4j.appender.RFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} - %m%n\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n# Custom Logging levels\n\nhadoop.metrics.log.level=INFO\n#log4j.logger.org.apache.hadoop.mapred.JobTracker=DEBUG\n#log4j.logger.org.apache.hadoop.mapred.TaskTracker=DEBUG\n#log4j.logger.org.apache.hadoop.fs.FSNamesystem=DEBUG\nlog4j.logger.org.apache.hadoop.metrics2=${hadoop.metrics.log.level}\n\n# Jets3t library\nlog4j.logger.org.jets3t.service.impl.rest.httpclient.RestS3Service=ERROR\n\n#\n# Null Appender\n# Trap security logger on the hadoop client side\n#\nlog4j.appender.NullAppender=org.apache.log4j.varia.NullAppender\n\n#\n# Event Counter Appender\n# Sends counts of logging messages at different severity levels to Hadoop Metrics.\n#\nlog4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter\n\n# Removes \"deprecated\" messages\nlog4j.logger.org.apache.hadoop.conf.Configuration.deprecation=WARN"
        }, 
        "mapred-env": {
            "jobhistory_heapsize": "900", 
            "mapred_log_dir_prefix": "/var/log/hadoop-mapreduce", 
            "mapred_pid_dir_prefix": "/var/run/hadoop-mapreduce", 
            "content": "\n# export JAVA_HOME=/home/y/libexec/jdk1.6.0/\n\nexport HADOOP_JOB_HISTORYSERVER_HEAPSIZE={{jobhistory_heapsize}}\n\nexport HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA\n\n#export HADOOP_JOB_HISTORYSERVER_OPTS=\n#export HADOOP_MAPRED_LOG_DIR=\"\" # Where log files are stored.  $HADOOP_MAPRED_HOME/logs by default.\n#export HADOOP_JHS_LOGGER=INFO,RFA # Hadoop JobSummary logger.\n#export HADOOP_MAPRED_PID_DIR= # The pid files are stored. /tmp by default.\n#export HADOOP_MAPRED_IDENT_STRING= #A string representing this instance of hadoop. $USER by default\n#export HADOOP_MAPRED_NICENESS= #The scheduling priority for daemons. Defaults to 0.", 
            "mapred_user_nofile_limit": "32768", 
            "mapred_user_nproc_limit": "65536", 
            "mapred_user": "mapred"
        }, 
        "core-site": {
            "io.serializations": "org.apache.hadoop.io.serializer.WritableSerialization", 
            "fs.trash.interval": "360", 
            "ha.failover-controller.active-standby-elector.zk.op.retries": "120", 
            "hadoop.security.authentication": "simple", 
            "io.compression.codecs": "org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.SnappyCodec", 
            "ipc.client.connection.maxidletime": "30000", 
            "mapreduce.jobtracker.webinterface.trusted": "false", 
            "hadoop.security.authorization": "false", 
            "net.topology.script.file.name": "/etc/hadoop/conf/topology_script.py", 
            "ipc.server.tcpnodelay": "true", 
            "ipc.client.connect.max.retries": "50", 
            "hadoop.security.auth_to_local": "DEFAULT", 
            "io.file.buffer.size": "131072", 
            "hadoop.proxyuser.hdfs.hosts": "*", 
            "hadoop.proxyuser.hdfs.groups": "*", 
            "ipc.client.idlethreshold": "8000", 
            "fs.defaultFS": "hdfs://{{ c.job.hostname }}:8020"
        }, 
        "yarn-env": {
            "yarn_pid_dir_prefix": "/var/run/hadoop-yarn", 
            "yarn_user_nproc_limit": "65536", 
            "apptimelineserver_heapsize": "1024", 
            "is_supported_yarn_ranger": "false", 
            "nodemanager_heapsize": "1024", 
            {% raw %}
            "content": "\nexport HADOOP_YARN_HOME={{hadoop_yarn_home}}\nexport YARN_LOG_DIR={{yarn_log_dir_prefix}}/$USER\nexport YARN_PID_DIR={{yarn_pid_dir_prefix}}/$USER\nexport HADOOP_LIBEXEC_DIR={{hadoop_libexec_dir}}\nexport JAVA_HOME={{java64_home}}\nexport JAVA_LIBRARY_PATH=\"${JAVA_LIBRARY_PATH}:{{hadoop_java_io_tmpdir}}\"\n\n# User for YARN daemons\nexport HADOOP_YARN_USER=${HADOOP_YARN_USER:-yarn}\n\n# resolve links - $0 may be a softlink\nexport YARN_CONF_DIR=\"${YARN_CONF_DIR:-$HADOOP_YARN_HOME/conf}\"\n\n# some Java parameters\n# export JAVA_HOME=/home/y/libexec/jdk1.6.0/\nif [ \"$JAVA_HOME\" != \"\" ]; then\n  #echo \"run java in $JAVA_HOME\"\n  JAVA_HOME=$JAVA_HOME\nfi\n\nif [ \"$JAVA_HOME\" = \"\" ]; then\n  echo \"Error: JAVA_HOME is not set.\"\n  exit 1\nfi\n\nJAVA=$JAVA_HOME/bin/java\nJAVA_HEAP_MAX=-Xmx1000m\n\n# For setting YARN specific HEAP sizes please use this\n# Parameter and set appropriately\nYARN_HEAPSIZE={{yarn_heapsize}}\n\n# check envvars which might override default args\nif [ \"$YARN_HEAPSIZE\" != \"\" ]; then\n  JAVA_HEAP_MAX=\"-Xmx\"\"$YARN_HEAPSIZE\"\"m\"\nfi\n\n# Resource Manager specific parameters\n\n# Specify the max Heapsize for the ResourceManager using a numerical value\n# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n# the value to 1000.\n# This value will be overridden by an Xmx setting specified in either YARN_OPTS\n# and/or YARN_RESOURCEMANAGER_OPTS.\n# If not specified, the default value will be picked from either YARN_HEAPMAX\n# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\nexport YARN_RESOURCEMANAGER_HEAPSIZE={{resourcemanager_heapsize}}\n\n# Specify the JVM options to be used when starting the ResourceManager.\n# These options will be appended to the options specified as YARN_OPTS\n# and therefore may override any similar flags set in YARN_OPTS\n#export YARN_RESOURCEMANAGER_OPTS=\n\n# Node Manager specific parameters\n\n# Specify the max Heapsize for the NodeManager using a numerical value\n# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n# the value to 1000.\n# This value will be overridden by an Xmx setting specified in either YARN_OPTS\n# and/or YARN_NODEMANAGER_OPTS.\n# If not specified, the default value will be picked from either YARN_HEAPMAX\n# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\nexport YARN_NODEMANAGER_HEAPSIZE={{nodemanager_heapsize}}\n\n# Specify the max Heapsize for the timeline server using a numerical value\n# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n# the value to 1024.\n# This value will be overridden by an Xmx setting specified in either YARN_OPTS\n# and/or YARN_TIMELINESERVER_OPTS.\n# If not specified, the default value will be picked from either YARN_HEAPMAX\n# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\nexport YARN_TIMELINESERVER_HEAPSIZE={{apptimelineserver_heapsize}}\n\n# Specify the JVM options to be used when starting the NodeManager.\n# These options will be appended to the options specified as YARN_OPTS\n# and therefore may override any similar flags set in YARN_OPTS\n#export YARN_NODEMANAGER_OPTS=\n\n# so that filenames w/ spaces are handled correctly in loops below\nIFS=\n\n\n# default log directory and file\nif [ \"$YARN_LOG_DIR\" = \"\" ]; then\n  YARN_LOG_DIR=\"$HADOOP_YARN_HOME/logs\"\nfi\nif [ \"$YARN_LOGFILE\" = \"\" ]; then\n  YARN_LOGFILE='yarn.log'\nfi\n\n# default policy file for service-level authorization\nif [ \"$YARN_POLICYFILE\" = \"\" ]; then\n  YARN_POLICYFILE=\"hadoop-policy.xml\"\nfi\n\n# restore ordinary behaviour\nunset IFS\n\n\nYARN_OPTS=\"$YARN_OPTS -Dhadoop.log.dir=$YARN_LOG_DIR\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.log.dir=$YARN_LOG_DIR\"\nYARN_OPTS=\"$YARN_OPTS -Dhadoop.log.file=$YARN_LOGFILE\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.log.file=$YARN_LOGFILE\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.home.dir=$YARN_COMMON_HOME\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.id.str=$YARN_IDENT_STRING\"\nYARN_OPTS=\"$YARN_OPTS -Dhadoop.root.logger=${YARN_ROOT_LOGGER:-INFO,console}\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.root.logger=${YARN_ROOT_LOGGER:-INFO,console}\"\nif [ \"x$JAVA_LIBRARY_PATH\" != \"x\" ]; then\n  YARN_OPTS=\"$YARN_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH\"\nfi\nYARN_OPTS=\"$YARN_OPTS -Dyarn.policy.file=$YARN_POLICYFILE\"\nYARN_OPTS=\"$YARN_OPTS -Djava.io.tmpdir={{hadoop_java_io_tmpdir}}\"", 
            {% endraw %}
            "yarn_heapsize": "1024", 
            "min_user_id": "1000", 
            "yarn_user_nofile_limit": "32768", 
            "yarn_user": "yarn", 
            "resourcemanager_heapsize": "1024", 
            "yarn_log_dir_prefix": "/var/log/hadoop-yarn"
        }, 
        "hadoop-env": {
            "proxyuser_group": "users", 
            "hdfs_user_nproc_limit": "65536", 
            "hdfs_log_dir_prefix": "/var/log/hadoop", 
            "hdfs_user_nofile_limit": "128000", 
            "hdfs_user": "hdfs",
            "hdfs_tmp_dir": "",
            "namenode_opt_maxnewsize": "128m", 
            "namenode_opt_maxpermsize": "256m", 
            {% raw %}
            "content": "\n# Set Hadoop-specific environment variables here.\n\n# The only required environment variable is JAVA_HOME.  All others are\n# optional.  When running a distributed configuration it is best to\n# set JAVA_HOME in this file, so that it is correctly defined on\n# remote nodes.\n\n# The java implementation to use.  Required.\nexport JAVA_HOME={{java_home}}\nexport HADOOP_HOME_WARN_SUPPRESS=1\n\n# Hadoop home directory\nexport HADOOP_HOME=${HADOOP_HOME:-/usr/lib/hadoop}\n\n# Hadoop Configuration Directory\n#TODO: if env var set that can cause problems\nexport HADOOP_CONF_DIR=${HADOOP_CONF_DIR:-{{hadoop_conf_dir}}}\n\n{# this is different for HDP1 #}\n# Path to jsvc required by secure HDP 2.0 datanode\nexport JSVC_HOME={{jsvc_path}}\n\n\n# The maximum amount of heap to use, in MB. Default is 1000.\nif [[ (\"$SERVICE\" = \"hiveserver2\") || (\"$SERVICE\" = \"metastore\") || ( \"$SERVICE\" = \"cli\") ]]; then\n  if [ \"$HADOOP_HEAPSIZE\" = \"\" ]; then\n    export HADOOP_HEAPSIZE=\"{{hadoop_heapsize}}\"\n  fi\nelse\n  export HADOOP_HEAPSIZE=\"{{hadoop_heapsize}}\"\nfi\n\n\nexport HADOOP_NAMENODE_INIT_HEAPSIZE=\"-Xms{{namenode_heapsize}}\"\n\n# Extra Java runtime options.  Empty by default.\nexport HADOOP_OPTS=\"-Djava.net.preferIPv4Stack=true ${HADOOP_OPTS}\"\n\n# Command specific options appended to HADOOP_OPTS when specified\n\n{% if java_version < 8 %}\nexport HADOOP_NAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -XX:PermSize={{namenode_opt_permsize}} -XX:MaxPermSize={{namenode_opt_maxpermsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT -Dorg.mortbay.jetty.Request.maxFormContentSize=-1  ${HADOOP_NAMENODE_OPTS}\"\nexport HADOOP_SECONDARYNAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -XX:PermSize={{namenode_opt_permsize}} -XX:MaxPermSize={{namenode_opt_maxpermsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps ${HADOOP_NAMENODE_INIT_HEAPSIZE} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_SECONDARYNAMENODE_OPTS}\"\n\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m -XX:MaxPermSize=512m $HADOOP_CLIENT_OPTS\"\n{% else %}\nexport HADOOP_NAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT -Dorg.mortbay.jetty.Request.maxFormContentSize=-1 ${HADOOP_NAMENODE_OPTS}\"\nexport HADOOP_SECONDARYNAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps ${HADOOP_NAMENODE_INIT_HEAPSIZE} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_SECONDARYNAMENODE_OPTS}\"\n\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m $HADOOP_CLIENT_OPTS\"\n{% endif %}\nHADOOP_JOBTRACKER_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{jtnode_opt_newsize}} -XX:MaxNewSize={{jtnode_opt_maxnewsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xmx{{jtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dmapred.audit.logger=INFO,MRAUDIT -Dhadoop.mapreduce.jobsummary.logger=INFO,JSA ${HADOOP_JOBTRACKER_OPTS}\"\n\nHADOOP_TASKTRACKER_OPTS=\"-server -Xmx{{ttnode_heapsize}} -Dhadoop.security.logger=ERROR,console -Dmapred.audit.logger=ERROR,console ${HADOOP_TASKTRACKER_OPTS}\"\nHADOOP_DATANODE_OPTS=\"-Xmx{{dtnode_heapsize}} -Dhadoop.security.logger=ERROR,DRFAS ${HADOOP_DATANODE_OPTS}\"\nHADOOP_BALANCER_OPTS=\"-server -Xmx{{hadoop_heapsize}}m ${HADOOP_BALANCER_OPTS}\"\n\n# On secure datanodes, user to run the datanode as after dropping privileges\nexport HADOOP_SECURE_DN_USER=${HADOOP_SECURE_DN_USER:-{{hadoop_secure_dn_user}}}\n\n# Extra ssh options.  Empty by default.\nexport HADOOP_SSH_OPTS=\"-o ConnectTimeout=5 -o SendEnv=HADOOP_CONF_DIR\"\n\n# Where log files are stored.  $HADOOP_HOME/logs by default.\nexport HADOOP_LOG_DIR={{hdfs_log_dir_prefix}}/$USER\n\n# History server logs\nexport HADOOP_MAPRED_LOG_DIR={{mapred_log_dir_prefix}}/$USER\n\n# Where log files are stored in the secure data environment.\nexport HADOOP_SECURE_DN_LOG_DIR={{hdfs_log_dir_prefix}}/$HADOOP_SECURE_DN_USER\n\n# File naming remote slave hosts.  $HADOOP_HOME/conf/slaves by default.\n# export HADOOP_SLAVES=${HADOOP_HOME}/conf/slaves\n\n# host:path where hadoop code should be rsync'd from.  Unset by default.\n# export HADOOP_MASTER=master:/home/$USER/src/hadoop\n\n# Seconds to sleep between slave commands.  Unset by default.  This\n# can be useful in large clusters, where, e.g., slave rsyncs can\n# otherwise arrive faster than the master can service them.\n# export HADOOP_SLAVE_SLEEP=0.1\n\n# The directory where pid files are stored. /tmp by default.\nexport HADOOP_PID_DIR={{hadoop_pid_dir_prefix}}/$USER\nexport HADOOP_SECURE_DN_PID_DIR={{hadoop_pid_dir_prefix}}/$HADOOP_SECURE_DN_USER\n\n# History server pid\nexport HADOOP_MAPRED_PID_DIR={{mapred_pid_dir_prefix}}/$USER\n\nYARN_RESOURCEMANAGER_OPTS=\"-Dyarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY\"\n\n# A string representing this instance of hadoop. $USER by default.\nexport HADOOP_IDENT_STRING=$USER\n\n# The scheduling priority for daemon processes.  See 'man nice'.\n\n# export HADOOP_NICENESS=10\n\n# Add database libraries\nJAVA_JDBC_LIBS=\"\"\nif [ -d \"/usr/share/java\" ]; then\n  for jarFile in `ls /usr/share/java | grep -E \"(mysql|ojdbc|postgresql|sqljdbc)\" 2>/dev/null`\n  do\n    JAVA_JDBC_LIBS=${JAVA_JDBC_LIBS}:$jarFile\n  done\nfi\n\n# Add libraries required by nodemanager\nMAPREDUCE_LIBS={{mapreduce_libs_path}}\n\n# Add libraries to the hadoop classpath - some may not need a colon as they already include it\nexport HADOOP_CLASSPATH=${HADOOP_CLASSPATH}${JAVA_JDBC_LIBS}:${MAPREDUCE_LIBS}\n\nif [ -d \"/usr/lib/tez\" ]; then\n  export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:/usr/lib/tez/*:/usr/lib/tez/lib/*:/etc/tez/conf\nfi\n\nif [ -d \"/usr/lib/phoenix\" ]; then\n  export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:/usr/lib/phoenix/*:/usr/lib/phoenix/lib/*\nfi\n\n# Setting path to hdfs command line\nexport HADOOP_LIBEXEC_DIR={{hadoop_libexec_dir}}\n\n#Mostly required for hadoop 2.0\nexport JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH}:/usr/lib/hadoop/lib/native/Linux-amd64-64\n\n{% if is_datanode_max_locked_memory_set %}\n# Fix temporary bug, when ulimit from conf files is not picked up, without full relogin. \n# Makes sense to fix only when runing DN as root \nif [ \"$command\" == \"datanode\" ] && [ \"$EUID\" -eq 0 ] && [ -n \"$HADOOP_SECURE_DN_USER\" ]; then\n  ulimit -l {{datanode_max_locked_memory}}\nfi\n{% endif %}", 
            {% endraw %}
            "namenode_heapsize": "1024m", 
            "namenode_opt_newsize": "128m", 
            "dtnode_heapsize": "1024m", 
            "hadoop_root_logger": "INFO,RFA", 
            "hadoop_heapsize": "1024", 
            "hadoop_pid_dir_prefix": "/var/run/hadoop", 
            "namenode_opt_permsize": "128m"
        }, 
        "zookeeper-log4j": {
            "content": "\n#\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n#\n#\n\n#\n# ZooKeeper Logging Configuration\n#\n\n# DEFAULT: console appender only\nlog4j.rootLogger=INFO, CONSOLE\n\n# Example with rolling log file\n#log4j.rootLogger=DEBUG, CONSOLE, ROLLINGFILE\n\n# Example with rolling log file and tracing\n#log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE\n\n#\n# Log INFO level and above messages to the console\n#\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.Threshold=INFO\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n\n#\n# Add ROLLINGFILE to rootLogger to get log file output\n#    Log DEBUG level and above messages to a log file\nlog4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender\nlog4j.appender.ROLLINGFILE.Threshold=DEBUG\nlog4j.appender.ROLLINGFILE.File=zookeeper.log\n\n# Max log file size of 10MB\nlog4j.appender.ROLLINGFILE.MaxFileSize=10MB\n# uncomment the next line to limit number of backup files\n#log4j.appender.ROLLINGFILE.MaxBackupIndex=10\n\nlog4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n\n\n#\n# Add TRACEFILE to rootLogger to get log file output\n#    Log DEBUG level and above messages to a log file\nlog4j.appender.TRACEFILE=org.apache.log4j.FileAppender\nlog4j.appender.TRACEFILE.Threshold=TRACE\nlog4j.appender.TRACEFILE.File=zookeeper_trace.log\n\nlog4j.appender.TRACEFILE.layout=org.apache.log4j.PatternLayout\n### Notice we are including log4j's NDC here (%x)\nlog4j.appender.TRACEFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L][%x] - %m%n"
        }, 
        "yarn-site": {
            "yarn.client.nodemanager-connect.max-wait-ms": "60000", 
            "yarn.node-labels.enabled": "false", 
            "yarn.resourcemanager.scheduler.monitor.enable": "false", 
            "yarn.resourcemanager.zk-num-retries": "1000", 
            "yarn.timeline-service.bind-host": "0.0.0.0", 
            "yarn.resourcemanager.ha.enabled": "false", 
            "yarn.nodemanager.linux-container-executor.cgroups.hierarchy": "hadoop-yarn", 
            "yarn.timeline-service.webapp.address": "{{ c.job.hostname }}:8188", 
            "yarn.resourcemanager.state-store.max-completed-applications": "${yarn.resourcemanager.max-completed-applications}", 
            "yarn.timeline-service.enabled": "true", 
            "yarn.nodemanager.recovery.enabled": "true", 
            "yarn.timeline-service.http-authentication.type": "simple", 
            "yarn.resourcemanager.webapp.https.address": "{{ c.job.hostname }}:8090", 
            "yarn.resourcemanager.hostname": "{{ c.job.hostname }}", 
            "yarn.resourcemanager.am.max-attempts": "2", 
            "yarn.nodemanager.log-aggregation.debug-enabled": "false", 
            "yarn.scheduler.maximum-allocation-vcores": "1", 
            "yarn.nodemanager.health-checker.script.timeout-ms": "60000", 
            "yarn.nodemanager.vmem-pmem-ratio": "2.1", 
            "yarn.resourcemanager.nodes.exclude-path": "/etc/hadoop/conf/yarn.exclude", 
            "yarn.nodemanager.linux-container-executor.cgroups.mount": "false", 
            "yarn.resourcemanager.system-metrics-publisher.dispatcher.pool-size": "10", 
            "yarn.log.server.url": "http://{{ c.job.hostname }}:19888/jobhistory/logs", 
            "yarn.application.classpath": "$HADOOP_CONF_DIR,/usr/lib/hadoop/*,/usr/lib/hadoop/lib/*,/usr/lib/hadoop-hdfs/*,/usr/lib/hadoop-hdfs/lib/*,/usr/lib/hadoop-yarn/*,/usr/lib/hadoop-yarn/lib/*,/usr/lib/hadoop-mapreduce/*,/usr/lib/hadoop-mapreduce/lib/*", 
            "yarn.resourcemanager.webapp.delegation-token-auth-filter.enabled": "false", 
            "yarn.nodemanager.local-dirs": "/hadoop/yarn/local", 
            "yarn.nodemanager.linux-container-executor.cgroups.strict-resource-usage": "false", 
            "yarn.nodemanager.remote-app-log-dir-suffix": "logs", 
            "yarn.resourcemanager.connect.max-wait.ms": "-1", 
            "yarn.resourcemanager.address": "{{ c.job.hostname }}:8050", 
            "yarn.scheduler.maximum-allocation-mb": "12288", 
            "yarn.nodemanager.container-monitor.interval-ms": "3000", 
            "yarn.node-labels.fs-store.retry-policy-spec": "2000, 500", 
            "yarn.resourcemanager.zk-acl": "world:anyone:rwcda", 
            "yarn.timeline-service.leveldb-state-store.path": "/hadoop/yarn/timeline", 
            "yarn.timeline-service.address": "{{ c.job.hostname }}:10200", 
            "yarn.log-aggregation-enable": "true", 
            "yarn.nodemanager.delete.debug-delay-sec": "0", 
            "yarn.timeline-service.store-class": "org.apache.hadoop.yarn.server.timeline.LeveldbTimelineStore", 
            "yarn.timeline-service.client.retry-interval-ms": "1000", 
            "hadoop.registry.zk.quorum": "{{ c.job.hostname }}:2181", 
            "yarn.nodemanager.aux-services": "mapreduce_shuffle", 
            "yarn.nodemanager.aux-services.mapreduce_shuffle.class": "org.apache.hadoop.mapred.ShuffleHandler", 
            "yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage": "90", 
            "yarn.resourcemanager.zk-timeout-ms": "10000", 
            "yarn.resourcemanager.fs.state-store.uri": " ", 
            "yarn.nodemanager.linux-container-executor.group": "hadoop", 
            "yarn.nodemanager.remote-app-log-dir": "/app-logs", 
            "yarn.resourcemanager.fs.state-store.retry-policy-spec": "2000, 500", 
            "yarn.timeline-service.generic-application-history.store-class": "org.apache.hadoop.yarn.server.applicationhistoryservice.NullApplicationHistoryStore", 
            "yarn.nodemanager.disk-health-checker.min-healthy-disks": "0.25", 
            "yarn.resourcemanager.work-preserving-recovery.enabled": "true", 
            "yarn.resourcemanager.resource-tracker.address": "{{ c.job.hostname }}:8025", 
            "yarn.resourcemanager.system-metrics-publisher.enabled": "true", 
            "yarn.resourcemanager.scheduler.class": "org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler", 
            "yarn.nodemanager.resource.memory-mb": "12288", 
            "yarn.nodemanager.resource.cpu-vcores": "1", 
            "yarn.timeline-service.ttl-ms": "2678400000", 
            "yarn.nodemanager.resource.percentage-physical-cpu-limit": "80", 
            "yarn.nodemanager.disk-health-checker.min-free-space-per-disk-mb": "1000", 
            "yarn.nodemanager.log-aggregation.roll-monitoring-interval-seconds": "-1", 
            "yarn.nodemanager.log.retain-second": "604800", 
            "yarn.timeline-service.state-store-class": "org.apache.hadoop.yarn.server.timeline.recovery.LeveldbTimelineStateStore", 
            "yarn.nodemanager.log-dirs": "/hadoop/yarn/log", 
            "yarn.timeline-service.client.max-retries": "30", 
            "yarn.nodemanager.health-checker.interval-ms": "135000", 
            "yarn.nodemanager.admin-env": "MALLOC_ARENA_MAX=$MALLOC_ARENA_MAX", 
            "yarn.nodemanager.vmem-check-enabled": "false", 
            "yarn.acl.enable": "false", 
            "yarn.node-labels.manager-class": "org.apache.hadoop.yarn.server.resourcemanager.nodelabels.MemoryRMNodeLabelsManager", 
            "yarn.timeline-service.leveldb-timeline-store.read-cache-size": "104857600", 
            "yarn.nodemanager.linux-container-executor.resources-handler.class": "org.apache.hadoop.yarn.server.nodemanager.util.DefaultLCEResourcesHandler", 
            "yarn.resourcemanager.webapp.address": "{{ c.job.hostname }}:8088", 
            "yarn.timeline-service.http-authentication.simple.anonymous.allowed": "true", 
            "yarn.timeline-service.leveldb-timeline-store.start-time-read-cache-size": "10000", 
            "yarn.resourcemanager.bind-host": "0.0.0.0", 
            "yarn.http.policy": "HTTP_ONLY", 
            "yarn.resourcemanager.scheduler.address": "{{ c.job.hostname }}:8030", 
            "yarn.nodemanager.recovery.dir": "{{yarn_log_dir_prefix}}/nodemanager/recovery-state", 
            "yarn.nodemanager.container-executor.class": "org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor", 
            "yarn.resourcemanager.store.class": "org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore", 
            "yarn.scheduler.minimum-allocation-vcores": "1", 
            "yarn.timeline-service.leveldb-timeline-store.path": "/var/log/hadoop-yarn/timeline", 
            "yarn.scheduler.minimum-allocation-mb": "4096", 
            "yarn.timeline-service.ttl-enable": "true", 
            "yarn.resourcemanager.zk-address": "{{ c.job.hostname }}:2181", 
            "yarn.log-aggregation.retain-seconds": "2592000", 
            "yarn.nodemanager.address": "0.0.0.0:45454", 
            "hadoop.registry.rm.enabled": "false", 
            "yarn.timeline-service.leveldb-timeline-store.ttl-interval-ms": "300000", 
            "yarn.resourcemanager.work-preserving-recovery.scheduling-wait-ms": "10000", 
            "yarn.resourcemanager.zk-state-store.parent-path": "/rmstore", 
            "yarn.nodemanager.log-aggregation.compression-type": "gz", 
            "yarn.nodemanager.log-aggregation.num-log-files-per-app": "30", 
            "yarn.resourcemanager.recovery.enabled": "true", 
            "yarn.timeline-service.recovery.enabled": "false", 
            "yarn.nodemanager.bind-host": "0.0.0.0", 
            "yarn.resourcemanager.zk-retry-interval-ms": "1000", 
            "yarn.nodemanager.linux-container-executor.cgroups.mount-path": "/cgroup", 
            "yarn.admin.acl": "", 
            "yarn.node-labels.fs-store.root-dir": "/system/yarn/node-labels", 
            "yarn.client.nodemanager-connect.retry-interval-ms": "10000", 
            "yarn.resourcemanager.admin.address": "{{ c.job.hostname }}:8141", 
            "yarn.timeline-service.webapp.https.address": "{{ c.job.hostname }}:8190", 
            "yarn.resourcemanager.connect.retry-interval.ms": "15000", 
            "yarn.timeline-service.leveldb-timeline-store.start-time-write-cache-size": "10000"
        }, 
        "capacity-scheduler": {
            "yarn.scheduler.capacity.default.minimum-user-limit-percent": "100", 
            "yarn.scheduler.capacity.root.default.maximum-capacity": "100", 
            "yarn.scheduler.capacity.root.default.state": "RUNNING", 
            "yarn.scheduler.capacity.root.capacity": "100", 
            "yarn.scheduler.capacity.maximum-am-resource-percent": "0.2", 
            "yarn.scheduler.capacity.maximum-applications": "10000", 
            "yarn.scheduler.capacity.root.default.user-limit-factor": "1", 
            "yarn.scheduler.capacity.node-locality-delay": "40", 
            "yarn.scheduler.capacity.root.default.acl_submit_applications": "*", 
            "yarn.scheduler.capacity.root.default.capacity": "100", 
            "yarn.scheduler.capacity.root.acl_administer_queue": "*", 
            "yarn.scheduler.capacity.root.queues": "default", 
            "yarn.scheduler.capacity.root.default.acl_administer_jobs": "*"
        }, 
        "ssl-server": {
            "ssl.server.keystore.location": "/etc/security/serverKeys/keystore.jks", 
            "ssl.server.keystore.keypassword": "bigdata", 
            "ssl.server.truststore.location": "/etc/security/serverKeys/all.jks", 
            "ssl.server.keystore.password": "bigdata", 
            "ssl.server.truststore.password": "bigdata", 
            "ssl.server.truststore.type": "jks", 
            "ssl.server.keystore.type": "jks", 
            "ssl.server.truststore.reload.interval": "10000"
        }, 
        "zoo.cfg": {
            "clientPort": "2181", 
            "autopurge.purgeInterval": "24", 
            "syncLimit": "5", 
            "dataDir": "/hadoop/zookeeper", 
            "initLimit": "10", 
            "tickTime": "2000", 
            "autopurge.snapRetainCount": "30"
        }, 
        "zookeeper-env": {
            "zk_log_dir": "/var/log/zookeeper", 
            {% raw %}
            "content": "\nexport JAVA_HOME={{java64_home}}\nexport ZOOKEEPER_HOME={{zk_home}}\nexport ZOO_LOG_DIR={{zk_log_dir}}\nexport ZOOPIDFILE={{zk_pid_file}}\nexport SERVER_JVMFLAGS={{zk_server_heapsize}}\nexport JAVA=$JAVA_HOME/bin/java\nexport CLASSPATH=$CLASSPATH:/usr/share/zookeeper/*\n\n{% if security_enabled %}\nexport SERVER_JVMFLAGS=\"$SERVER_JVMFLAGS -Djava.security.auth.login.config={{zk_server_jaas_file}}\"\nexport CLIENT_JVMFLAGS=\"$CLIENT_JVMFLAGS -Djava.security.auth.login.config={{zk_client_jaas_file}}\"\n{% endif %}", 
            {% endraw %}
            "zk_pid_dir": "/var/run/zookeeper", 
            "zk_user": "zookeeper"
        }, 
        "cluster-env": {
            "security_enabled": "false", 
            "smokeuser_keytab": "/etc/security/keytabs/smokeuser.headless.keytab", 
            "ignore_groupsusers_create": "false", 
            "override_uid": "true", 
            "kerberos_domain": "EXAMPLE.COM", 
            {% raw %}             
            "repo_suse_rhel_template": "[{{repo_id}}]\nname={{repo_id}}\n{% if mirror_list %}mirrorlist={{mirror_list}}{% else %}baseurl={{base_url}}{% endif %}\n\npath=/\nenabled=1\ngpgcheck=0", 
            {% endraw %}
            "user_group": "hadoop", 
            "smokeuser": "ambari-qa", 
            {% raw %}
            "repo_ubuntu_template": "{{package_type}} {{base_url}} {{components}}"
            {% endraw %}

        }
    }
}