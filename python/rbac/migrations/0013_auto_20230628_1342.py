# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by Django 3.2.17 on 2023-06-28 13:42

import hashlib

from django.conf import settings
from django.db import migrations, models


def migrate_users_to_group(apps, schema_editor):
    Policy = apps.get_model("rbac", "Policy")
    Group = apps.get_model("rbac", "Group")

    for policy in Policy.objects.filter(user__isnull=False).distinct():
        policy_users = policy.user.all()
        str_usernames = "".join(user.username for user in policy_users)
        group_name = (
            f"migration_rbac_0012_group_{hashlib.sha256(str_usernames.encode(settings.ENCODING_UTF_8)).hexdigest()}"
        )
        migrate_group, created = Group.objects.get_or_create(name=group_name, display_name=group_name, type="local")
        if created or not migrate_group.user_set.all().exists():
            migrate_group.user_set.add(*policy_users)

        policy.user.remove(*policy_users)
        policy.group.add(migrate_group)


def migrate_groups_to_users(apps, schema_editor):
    Policy = apps.get_model("rbac", "Policy")
    for policy in Policy.objects.prefetch_related("group").filter(group__name__startswith="migration_rbac_0012_group_"):
        for group in policy.group.filter(name__startswith="migration_rbac_0012_group_"):
            for group_policy in group.policy_set.all():
                group_policy.user.add(*group.user_set.values_list("id", flat=True))

            group.delete()


class Migration(migrations.Migration):
    dependencies = [
        ("rbac", "0012_delete_inactive_users"),
    ]

    operations = [
        migrations.RunPython(code=migrate_users_to_group, reverse_code=migrate_groups_to_users),
        migrations.RemoveField(
            model_name="policy",
            name="user",
        ),
        migrations.RemoveField(
            model_name="policy",
            name="user_object_perm",
        ),
        migrations.AlterField(
            model_name="policy",
            name="group",
            field=models.ManyToManyField(to="rbac.Group"),
        ),
    ]
